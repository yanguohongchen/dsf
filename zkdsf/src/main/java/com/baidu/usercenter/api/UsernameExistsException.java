/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.baidu.usercenter.api;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class UsernameExistsException extends org.apache.avro.specific.SpecificExceptionBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"error\",\"name\":\"UsernameExistsException\",\"namespace\":\"com.baidu.usercenter.api\",\"fields\":[]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  public UsernameExistsException() {
    super();
  }
  
  public UsernameExistsException(Object value) {
    super(value);
  }

  public UsernameExistsException(Throwable cause) {
    super(cause);
  }

  public UsernameExistsException(Object value, Throwable cause) {
    super(value, cause);
  }
  
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /** Creates a new UsernameExistsException RecordBuilder */
  public static com.baidu.usercenter.api.UsernameExistsException.Builder newBuilder() {
    return new com.baidu.usercenter.api.UsernameExistsException.Builder();
  }
  
  /** Creates a new UsernameExistsException RecordBuilder by copying an existing Builder */
  public static com.baidu.usercenter.api.UsernameExistsException.Builder newBuilder(com.baidu.usercenter.api.UsernameExistsException.Builder other) {
    return new com.baidu.usercenter.api.UsernameExistsException.Builder(other);
  }
  
  /** Creates a new UsernameExistsException RecordBuilder by copying an existing UsernameExistsException instance */
  public static com.baidu.usercenter.api.UsernameExistsException.Builder newBuilder(com.baidu.usercenter.api.UsernameExistsException other) {
    return new com.baidu.usercenter.api.UsernameExistsException.Builder(other);
  }
  
  /**
   * RecordBuilder for UsernameExistsException instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificErrorBuilderBase<UsernameExistsException>
    implements org.apache.avro.data.ErrorBuilder<UsernameExistsException> {


    /** Creates a new Builder */
    private Builder() {
      super(com.baidu.usercenter.api.UsernameExistsException.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.baidu.usercenter.api.UsernameExistsException.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing UsernameExistsException instance */
    private Builder(com.baidu.usercenter.api.UsernameExistsException other) {
      super(other);
    }

    @Override
    public com.baidu.usercenter.api.UsernameExistsException.Builder setValue(Object value) {
      super.setValue(value);
      return this;
    }
    
    @Override
    public com.baidu.usercenter.api.UsernameExistsException.Builder clearValue() {
      super.clearValue();
      return this;
    }

    @Override
    public com.baidu.usercenter.api.UsernameExistsException.Builder setCause(Throwable cause) {
      super.setCause(cause);
      return this;
    }
    
    @Override
    public com.baidu.usercenter.api.UsernameExistsException.Builder clearCause() {
      super.clearCause();
      return this;
    }

    @Override
    public UsernameExistsException build() {
      try {
        UsernameExistsException record = new UsernameExistsException(getValue(), getCause());
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
