/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.baidu.usercenter.api;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class UserInfo extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"UserInfo\",\"namespace\":\"com.baidu.usercenter.api\",\"fields\":[{\"name\":\"userId\",\"type\":\"long\"},{\"name\":\"username\",\"type\":\"string\"},{\"name\":\"email\",\"type\":\"string\"},{\"name\":\"mobile\",\"type\":\"long\"},{\"name\":\"depid\",\"type\":\"long\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public long userId;
  @Deprecated public java.lang.CharSequence username;
  @Deprecated public java.lang.CharSequence email;
  @Deprecated public long mobile;
  @Deprecated public long depid;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public UserInfo() {}

  /**
   * All-args constructor.
   */
  public UserInfo(java.lang.Long userId, java.lang.CharSequence username, java.lang.CharSequence email, java.lang.Long mobile, java.lang.Long depid) {
    this.userId = userId;
    this.username = username;
    this.email = email;
    this.mobile = mobile;
    this.depid = depid;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return userId;
    case 1: return username;
    case 2: return email;
    case 3: return mobile;
    case 4: return depid;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: userId = (java.lang.Long)value$; break;
    case 1: username = (java.lang.CharSequence)value$; break;
    case 2: email = (java.lang.CharSequence)value$; break;
    case 3: mobile = (java.lang.Long)value$; break;
    case 4: depid = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'userId' field.
   */
  public java.lang.Long getUserId() {
    return userId;
  }

  /**
   * Sets the value of the 'userId' field.
   * @param value the value to set.
   */
  public void setUserId(java.lang.Long value) {
    this.userId = value;
  }

  /**
   * Gets the value of the 'username' field.
   */
  public java.lang.CharSequence getUsername() {
    return username;
  }

  /**
   * Sets the value of the 'username' field.
   * @param value the value to set.
   */
  public void setUsername(java.lang.CharSequence value) {
    this.username = value;
  }

  /**
   * Gets the value of the 'email' field.
   */
  public java.lang.CharSequence getEmail() {
    return email;
  }

  /**
   * Sets the value of the 'email' field.
   * @param value the value to set.
   */
  public void setEmail(java.lang.CharSequence value) {
    this.email = value;
  }

  /**
   * Gets the value of the 'mobile' field.
   */
  public java.lang.Long getMobile() {
    return mobile;
  }

  /**
   * Sets the value of the 'mobile' field.
   * @param value the value to set.
   */
  public void setMobile(java.lang.Long value) {
    this.mobile = value;
  }

  /**
   * Gets the value of the 'depid' field.
   */
  public java.lang.Long getDepid() {
    return depid;
  }

  /**
   * Sets the value of the 'depid' field.
   * @param value the value to set.
   */
  public void setDepid(java.lang.Long value) {
    this.depid = value;
  }

  /** Creates a new UserInfo RecordBuilder */
  public static com.baidu.usercenter.api.UserInfo.Builder newBuilder() {
    return new com.baidu.usercenter.api.UserInfo.Builder();
  }
  
  /** Creates a new UserInfo RecordBuilder by copying an existing Builder */
  public static com.baidu.usercenter.api.UserInfo.Builder newBuilder(com.baidu.usercenter.api.UserInfo.Builder other) {
    return new com.baidu.usercenter.api.UserInfo.Builder(other);
  }
  
  /** Creates a new UserInfo RecordBuilder by copying an existing UserInfo instance */
  public static com.baidu.usercenter.api.UserInfo.Builder newBuilder(com.baidu.usercenter.api.UserInfo other) {
    return new com.baidu.usercenter.api.UserInfo.Builder(other);
  }
  
  /**
   * RecordBuilder for UserInfo instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<UserInfo>
    implements org.apache.avro.data.RecordBuilder<UserInfo> {

    private long userId;
    private java.lang.CharSequence username;
    private java.lang.CharSequence email;
    private long mobile;
    private long depid;

    /** Creates a new Builder */
    private Builder() {
      super(com.baidu.usercenter.api.UserInfo.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.baidu.usercenter.api.UserInfo.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.userId)) {
        this.userId = data().deepCopy(fields()[0].schema(), other.userId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.username)) {
        this.username = data().deepCopy(fields()[1].schema(), other.username);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.email)) {
        this.email = data().deepCopy(fields()[2].schema(), other.email);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.mobile)) {
        this.mobile = data().deepCopy(fields()[3].schema(), other.mobile);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.depid)) {
        this.depid = data().deepCopy(fields()[4].schema(), other.depid);
        fieldSetFlags()[4] = true;
      }
    }
    
    /** Creates a Builder by copying an existing UserInfo instance */
    private Builder(com.baidu.usercenter.api.UserInfo other) {
            super(com.baidu.usercenter.api.UserInfo.SCHEMA$);
      if (isValidValue(fields()[0], other.userId)) {
        this.userId = data().deepCopy(fields()[0].schema(), other.userId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.username)) {
        this.username = data().deepCopy(fields()[1].schema(), other.username);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.email)) {
        this.email = data().deepCopy(fields()[2].schema(), other.email);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.mobile)) {
        this.mobile = data().deepCopy(fields()[3].schema(), other.mobile);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.depid)) {
        this.depid = data().deepCopy(fields()[4].schema(), other.depid);
        fieldSetFlags()[4] = true;
      }
    }

    /** Gets the value of the 'userId' field */
    public java.lang.Long getUserId() {
      return userId;
    }
    
    /** Sets the value of the 'userId' field */
    public com.baidu.usercenter.api.UserInfo.Builder setUserId(long value) {
      validate(fields()[0], value);
      this.userId = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'userId' field has been set */
    public boolean hasUserId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'userId' field */
    public com.baidu.usercenter.api.UserInfo.Builder clearUserId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'username' field */
    public java.lang.CharSequence getUsername() {
      return username;
    }
    
    /** Sets the value of the 'username' field */
    public com.baidu.usercenter.api.UserInfo.Builder setUsername(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.username = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'username' field has been set */
    public boolean hasUsername() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'username' field */
    public com.baidu.usercenter.api.UserInfo.Builder clearUsername() {
      username = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'email' field */
    public java.lang.CharSequence getEmail() {
      return email;
    }
    
    /** Sets the value of the 'email' field */
    public com.baidu.usercenter.api.UserInfo.Builder setEmail(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.email = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'email' field has been set */
    public boolean hasEmail() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'email' field */
    public com.baidu.usercenter.api.UserInfo.Builder clearEmail() {
      email = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'mobile' field */
    public java.lang.Long getMobile() {
      return mobile;
    }
    
    /** Sets the value of the 'mobile' field */
    public com.baidu.usercenter.api.UserInfo.Builder setMobile(long value) {
      validate(fields()[3], value);
      this.mobile = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'mobile' field has been set */
    public boolean hasMobile() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'mobile' field */
    public com.baidu.usercenter.api.UserInfo.Builder clearMobile() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'depid' field */
    public java.lang.Long getDepid() {
      return depid;
    }
    
    /** Sets the value of the 'depid' field */
    public com.baidu.usercenter.api.UserInfo.Builder setDepid(long value) {
      validate(fields()[4], value);
      this.depid = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'depid' field has been set */
    public boolean hasDepid() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'depid' field */
    public com.baidu.usercenter.api.UserInfo.Builder clearDepid() {
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    public UserInfo build() {
      try {
        UserInfo record = new UserInfo();
        record.userId = fieldSetFlags()[0] ? this.userId : (java.lang.Long) defaultValue(fields()[0]);
        record.username = fieldSetFlags()[1] ? this.username : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.email = fieldSetFlags()[2] ? this.email : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.mobile = fieldSetFlags()[3] ? this.mobile : (java.lang.Long) defaultValue(fields()[3]);
        record.depid = fieldSetFlags()[4] ? this.depid : (java.lang.Long) defaultValue(fields()[4]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
