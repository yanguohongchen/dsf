/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.baidu.usercenter.api;  
@SuppressWarnings("all")
/** **********************************会话模块******************************************* */
@org.apache.avro.specific.AvroGenerated
public class Session extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Session\",\"namespace\":\"com.baidu.usercenter.api\",\"doc\":\"**********************************会话模块*******************************************\",\"fields\":[{\"name\":\"sid\",\"type\":\"string\"},{\"name\":\"encryptKey\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence sid;
  @Deprecated public java.lang.CharSequence encryptKey;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Session() {}

  /**
   * All-args constructor.
   */
  public Session(java.lang.CharSequence sid, java.lang.CharSequence encryptKey) {
    this.sid = sid;
    this.encryptKey = encryptKey;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return sid;
    case 1: return encryptKey;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: sid = (java.lang.CharSequence)value$; break;
    case 1: encryptKey = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'sid' field.
   */
  public java.lang.CharSequence getSid() {
    return sid;
  }

  /**
   * Sets the value of the 'sid' field.
   * @param value the value to set.
   */
  public void setSid(java.lang.CharSequence value) {
    this.sid = value;
  }

  /**
   * Gets the value of the 'encryptKey' field.
   */
  public java.lang.CharSequence getEncryptKey() {
    return encryptKey;
  }

  /**
   * Sets the value of the 'encryptKey' field.
   * @param value the value to set.
   */
  public void setEncryptKey(java.lang.CharSequence value) {
    this.encryptKey = value;
  }

  /** Creates a new Session RecordBuilder */
  public static com.baidu.usercenter.api.Session.Builder newBuilder() {
    return new com.baidu.usercenter.api.Session.Builder();
  }
  
  /** Creates a new Session RecordBuilder by copying an existing Builder */
  public static com.baidu.usercenter.api.Session.Builder newBuilder(com.baidu.usercenter.api.Session.Builder other) {
    return new com.baidu.usercenter.api.Session.Builder(other);
  }
  
  /** Creates a new Session RecordBuilder by copying an existing Session instance */
  public static com.baidu.usercenter.api.Session.Builder newBuilder(com.baidu.usercenter.api.Session other) {
    return new com.baidu.usercenter.api.Session.Builder(other);
  }
  
  /**
   * RecordBuilder for Session instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Session>
    implements org.apache.avro.data.RecordBuilder<Session> {

    private java.lang.CharSequence sid;
    private java.lang.CharSequence encryptKey;

    /** Creates a new Builder */
    private Builder() {
      super(com.baidu.usercenter.api.Session.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.baidu.usercenter.api.Session.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.sid)) {
        this.sid = data().deepCopy(fields()[0].schema(), other.sid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.encryptKey)) {
        this.encryptKey = data().deepCopy(fields()[1].schema(), other.encryptKey);
        fieldSetFlags()[1] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Session instance */
    private Builder(com.baidu.usercenter.api.Session other) {
            super(com.baidu.usercenter.api.Session.SCHEMA$);
      if (isValidValue(fields()[0], other.sid)) {
        this.sid = data().deepCopy(fields()[0].schema(), other.sid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.encryptKey)) {
        this.encryptKey = data().deepCopy(fields()[1].schema(), other.encryptKey);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'sid' field */
    public java.lang.CharSequence getSid() {
      return sid;
    }
    
    /** Sets the value of the 'sid' field */
    public com.baidu.usercenter.api.Session.Builder setSid(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.sid = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'sid' field has been set */
    public boolean hasSid() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'sid' field */
    public com.baidu.usercenter.api.Session.Builder clearSid() {
      sid = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'encryptKey' field */
    public java.lang.CharSequence getEncryptKey() {
      return encryptKey;
    }
    
    /** Sets the value of the 'encryptKey' field */
    public com.baidu.usercenter.api.Session.Builder setEncryptKey(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.encryptKey = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'encryptKey' field has been set */
    public boolean hasEncryptKey() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'encryptKey' field */
    public com.baidu.usercenter.api.Session.Builder clearEncryptKey() {
      encryptKey = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public Session build() {
      try {
        Session record = new Session();
        record.sid = fieldSetFlags()[0] ? this.sid : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.encryptKey = fieldSetFlags()[1] ? this.encryptKey : (java.lang.CharSequence) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
